#include <windows.h>
#include <windowsx.h> // GET_X_LPARAN, GET_Y_LPARAMマクロの定義
#include <string>

static const int MAX_WIDTH = 800;
static const int MAX_HEIGHT = 600;

LRESULT CALLBACK WndProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
    _In_opt_ HINSTANCE hPrevInstance, _In_ LPWSTR lpCmdLine, _In_ int nCmdShow)
{
    TCHAR szAppName[] = L"PaintApp";
    WNDCLASS wc;
    HWND hwnd;
    MSG msg;

    // ウィンドウクラスの属性を設定
    wc.style = CS_HREDRAW | CS_VREDRAW;
    wc.lpfnWndProc = WndProc;
    wc.cbClsExtra = 0;
    wc.cbWndExtra = 0;
    wc.hInstance = hInstance;
    wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wc.lpszMenuName = NULL;
    wc.lpszClassName = szAppName;

    // ウィンドウクラスを登録
    if (!RegisterClass(&wc)) return 0;

    // ウィンドウを作成
    hwnd = CreateWindow(
        szAppName, L"Paint",
        WS_OVERLAPPEDWINDOW,
        50, 50,
        MAX_WIDTH, MAX_HEIGHT,
        NULL, NULL,
        hInstance, NULL);

    if (!hwnd) return 0;

    // ウィンドウを表示
    ShowWindow(hwnd, nCmdShow);

    while (GetMessage(&msg, NULL, 0, 0) > 0) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int)msg.wParam;
}

LRESULT CALLBACK WndProc(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    static bool isFirstDown = true;
    static POINT moveToPoint;
    static POINT lineToPoint;

    HDC hdc;

    // デバッグ情報表示用
    wchar_t format[] = L"%d,%d,%d,%d\n";
    wchar_t* buf = new wchar_t[18]; // (8文字+終端ヌル1文字)x2バイト。いわゆるASCIIコードの範囲はUTF16でも1文字2バイトに収まる

    switch (uMsg) {
    case WM_MOUSEMOVE:     
        // マウスの左ボタンがダウン状態（押されている）かのチェック
        // GetKeyState()の結果を
        // 0x8000 で & するか 0x80 で & すればチェックできる。
        // （公式ドキュメントでは 0x8000のみ）
        if (GetKeyState(VK_LBUTTON) & 0x8000) {
            
            // アップ状態（押されてない）からダウン状態へ
            // 変化したかどうかをチェック
            if (isFirstDown) {
                // 現在のマウス座標をmoveToEx用の位置へコピー
                moveToPoint.x = GET_X_LPARAM(lParam);
                moveToPoint.y = GET_Y_LPARAM(lParam);
                isFirstDown = false;
            }
            else {
                // 前回のlineTo用の位置を、moveToEx用の位置へコピー
                moveToPoint.x = lineToPoint.x;
                moveToPoint.y = lineToPoint.y;
            }

            // 現在のマウス座標を、lineTo用の位置へコピー
            lineToPoint.x = GET_X_LPARAM(lParam);
            lineToPoint.y = GET_Y_LPARAM(lParam);

            /*
             * InvalidateRectの最後の引数を false にすると、
             * 更新領域内が消去されず、これまで描いた線が残ります。
             * ただし、ウィンドウのリサイズなどで別途更新領域が発生すると
             * 消去されます。
             *
             * 最後の引数を true にすると、
             * これまで描いた線は全て消去され、
             * 直前の線分のみが描画されます。
             */ 
            InvalidateRect(hwnd, NULL, false);
            // InvalidateRect(hwnd, NULL, true);
        }
        else {
            isFirstDown = true;
        }

        return 0;
    case WM_PAINT:
        PAINTSTRUCT paint;
        hdc = BeginPaint(hwnd, &paint);

        MoveToEx(hdc, moveToPoint.x, moveToPoint.y, NULL);
        LineTo(hdc, lineToPoint.x, lineToPoint.y);
        

        // 更新領域の左上座標と幅、高さを表示
        // x, y, width, height
        /*
        swprintf_s(buf, 18, format,
            paint.rcPaint.left,
            paint.rcPaint.top,
            paint.rcPaint.right - paint.rcPaint.left,
            paint.rcPaint.bottom - paint.rcPaint.top);
        OutputDebugString(buf);
        */

        EndPaint(hwnd, &paint);

        return 0;
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;
    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}